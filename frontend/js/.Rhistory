findInterval(seq(0, 1, l=20), seq(0.5, 1, by=0.1))
dat <- read.table("clipboard", header=TRUE)
# some data
x <- runif(1000)
x2 <- rnorm(1000)
y <- data.frame(x,x2)
# we want to bin the dataframe y acording to values in x into b bins
b = 10
# we create breaks in several ways
breaks=unique(quantile(x, probs=seq.int(0,1, by=1/b)))
breaks=unique(quantile(y$x, probs=seq.int(0,1, length.out=b+1)))
# now to question
# this works
y$bins <- with(df.score, cut(x, breaks=unique(quantile(Pchurn, probs=seq.int(0,1, length.out=11))), include.lowest=TRUE))
table(y$bins)
y$bins <- with(df.score, cut(x, 
                    breaks=unique(quantile(Pchurn, 
                                         probs=seq.int(0,1, length.out=b+1))), 
                    include.lowest=TRUE))
filename<-"../../backend/tmpdata/144517153690930/LDHeatMapZoom_1_40.csv"
filename
filename<-"/home/metabolomics/snipa/web/backend/tmpdata/144517153690930/LDHeatMapZoom_1_40.csv"
filename
outfile<-"sample.json"
population<-"afr"
colarray=c( "#ff0000" ,"#FFA500" ,"#ffff00", "#D8D8D8", "#FFFFFF")
library(MASS)
push <- function(vec, item) {
     vec=substitute(vec)
     eval.parent(parse(text = paste(vec, ' <- c(', vec, ', ', item, ')', sep = '')), n = 1)
}
a1<-numeric(0)
b1<-numeric(0)
c1<-numeric(0)
dat<-read.csv(filename,sep="\t",header=T)
#dat<-dat[1:10,]
a<-as.vector(dat$POS1)
b<-as.vector(dat$POS2)
c<-dat$R2
qrsid<-as.vector(dat$QRSID)
rsid<-as.vector(dat$RSID)
colmap=list()
auni=unique(a);
buni=unique(b);
for (i in 1:nrow(dat))
{
   colmap[[paste(a[i],b[i],sep="-")]]=paste0(round(as.numeric(as.character(c[i])),1),"-",qrsid[i],"-",rsid[0])
}
for (i in 1:nrow(dat))
{
   colmap[[paste(a[i],b[i],sep="-")]]=paste0(round(as.numeric(as.character(c[i])),1),"-",qrsid[i],"-",rsid[i])
}
qrsid
filename<-"/home/metabolomics/snipa/web/backend/tmpdata/144517153690930/LDHeatMapZoom_1_40.csv"
filename<-"/home/metabolomics/snipa/web/tmpdata/144517153690930/LDHeatMapZoom_1_40.csv"
filename<-args[1];
outfile<-paste("/home/metabolomics/snipa/web/frontend/js/tmp/data",args[3],".json",sep="")
print(outfile);
population<-args[2];
colarray=c( "#ff0000" ,"#FFA500" ,"#ffff00", "#D8D8D8", "#FFFFFF")
library(MASS)
push <- function(vec, item) {
     vec=substitute(vec)
     eval.parent(parse(text = paste(vec, ' <- c(', vec, ', ', item, ')', sep = '')), n = 1)
}
a1<-numeric(0)
b1<-numeric(0)
c1<-numeric(0)
dat<-read.csv(filename,sep="\t",header=T)
#dat<-dat[1:10,]
a<-as.vector(dat$POS1)
b<-as.vector(dat$POS2)
c<-dat$R2
qrsid<-as.vector(dat$QRSID)
rsid<-as.vector(dat$RSID)
colmap=list()
auni=unique(a);
buni=unique(b);
for (i in 1:nrow(dat))
{
   colmap[[paste(a[i],b[i],sep="-")]]=paste0(round(as.numeric(as.character(c[i])),1),"-",qrsid[i],"-",rsid[i])
}
m<-c(a,b)
muni<-sort(unique(m))
#print(length(muni))
muni<-muni[1:(length(muni)-2)]
a2<-numeric(0)
b2<-numeric(0)
c2<-numeric(0)
p = matrix(0, length(muni), length(muni))
q = matrix(0, length(muni), length(muni))
r = matrix(0, length(muni), length(muni))
for (i in 1:length(muni))
{
   for (j in 1:length(muni))
   {
       if(j>=i){
       value<-colmap[[paste(muni[i],muni[j],sep="-")]]
       if(muni[i]==muni[j])
       {
         value<-1
       }
       else if(length(value)==0)
       {
          value<-colmap[[paste(muni[j],muni[i],sep="-")]]
       }
       if(length(value)==0)
       {
                 value<-0
       }
       #push(a2,muni[i])
       #push(b2,muni[j])
       #push(c2,value)
       x<-(as.numeric(muni[i])+as.numeric(muni[j]))/2
       y<-as.numeric(muni[j])-as.numeric(muni[i])
       p[i,j] = p[i,j] + x
       q[i,j] = q[i,j] + abs(y)
       if(args[4] != "0") { q[i,j] = -q[i,j];}
       r[i,j] = r[i,j] + value
       }
       #rec<-paste(a[i],a[j],value)
       #print(rec)
   }
}
cat("[{\"type\": \"pie\",\"name\": \"SNPs\"\"data\": [[\"Downrstream\"","\n")
cat("[{\"type\": \"pie\",\"name\": \"SNPs\",\"data\": [[\"Downrstream\"","\n")
